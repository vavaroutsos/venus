# Usage tips:
# - working on something, and need that to be built first? Temporarily, insert
#   a stage before the others.
# - to make gitlab skip jobs, prepend its name with . (a dot).
# - gitlab: don't forget to set the builds option to clone instead of git fetch
#   see Project Settings -> Builds. Fixes issues new builds not being 100%
#   clean builds.
# - In Project Settings you can also increase the max build time, default 60
#   minutes, to, for example, 180 minutes. 

stages:
  - build
  - deploy

build-danny-ccgx-swu:
  script:
    - make CONFIG=danny reconf fetch-all build/conf/bblayers.conf
    - ./build-danny-ccgx-swu.sh all
    - ./ci-populate-artifacts.sh danny
  stage: build
  tags:
    - venus
    - linux
  artifacts:
    expire_in: 1 week
    paths:
    - artifacts-danny.tgz

build-jethro:
  script:
    - make CONFIG=jethro reconf fetch-all build/conf/bblayers.conf
    - ./build-jethro-cortexa8hf.sh
    - make venus-images
    - ./build-venus-jethro-swu.sh
    - ./ci-populate-artifacts.sh jethro
  stage: build
  tags:
    - venus
    - linux
  artifacts:
    expire_in: 1 week
    paths:
    - artifacts-jethro.tgz

.build-danny-ccgx-opensource:
  # This stage could be build immediately after the full version, saves time.
  # But that changes things too, the private metas will still be applied.
  # Therefore we do a clean build, making sure that John Doe on the internet
  # can build the image from scratch, and that the result is the same.
  script:
    - make CONFIG=danny fetch ccgx-venus-image
    - rm deploy/venus/images/ccgx/*.ubifs
  stage: build
  tags:
    - venus
    - linux
  artifacts:
    expire_in: 1 week
    paths:
    - deploy/venus/images

build-debian-packages:
  script:
    - make CONFIG=raspbian reconf fetch-all build/conf/bblayers.conf
    - ./build-all-debian-packages.sh
    - ./ci-populate-artifacts.sh deb
  stage: build
  tags:
    - venus
    - linux
  artifacts:
    expire_in: 1 week
    paths:
    - artifacts-deb.tgz

deploy:
  script:
    - rm -rf artifacts; find . -maxdepth 1 -name "artifacts-*.tgz" -exec tar -xf {} \;
    - ./ci-upload-artifacts-to-build-feeds.sh $CI_BUILD_REF_NAME
  stage: deploy
  tags:
    - almere
    - osx

deploy_www:
  only:
    - master
  script:
    - rm -rf artifacts; find . -maxdepth 1 -name "artifacts-*.tgz" -exec tar -xf {} \;
    - ./ci-upload-artifacts-to-www.sh
  stage: deploy
  tags:
    - almere
    - osx
